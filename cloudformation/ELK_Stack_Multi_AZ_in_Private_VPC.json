{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "ELK Stack - Elasticsearch, Logstash, Kibana 4",

    "Parameters": {

        "Stack": {
            "Description": "Stack applied as a tag",
            "Type": "String"
        },
        "KeyName": {
            "Default": "bootstrap",
            "Description": "Name of an existing EC2 KeyPair for SSH access",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "Stage": {
            "Description": "Stage applied as a tag",
            "Type": "String",
            "Default": "PROD",
            "AllowedValues": [ "PROD", "CODE", "INFRA" ],
            "ConstraintDescription": "must be a valid stage eg. PROD, CODE, INFRA"
        },
        "ElkCapacity": {
            "Description": "Autoscale Size",
            "Type": "Number",
            "Default": "1",
            "MinValue": 1,
            "MaxValue": 12
        },
        "ElkInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m4.large",
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type"
        },
        "CookieSecret": {
            "Description": "Secret used to sign the session ID cookie ie. any random string",
            "Type": "String",
            "NoEcho": true,
            "AllowedPattern" : "[a-zA-Z0-9_-]*",
            "ConstraintDescription": "must only contain upper and lower case letters, numbers, dashes and underscores"
        },
        "GoogleOAuthClientId": {
            "Description": "Google OAuth 2.0 Client ID",
            "Type": "String"
        },
        "GoogleOAuthClientSecret": {
            "Description": "Google OAuth 2.0 Client Secret",
            "Type": "String",
            "NoEcho": true
        },
        "AllowedDomain": {
            "Description": "Google apps domain eg. gmail.com or example.com",
            "Type": "String",
            "Default": "guardian.co.uk"
        },
        "VpcId": {
            "Description": "ID of the VPC onto which to launch the application eg. vpc-1234abcd",
            "Type": "AWS::EC2::VPC::Id"
        },
        "PublicVpcSubnets" : {
            "Description": "Subnets to use in VPC for public ELB eg. subnet-abcd1234",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "PrivateVpcSubnets" : {
            "Description": "Subnets to use in VPC for instances eg. subnet-abcd1234",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "HostedZoneName": {
            "Description": "Route53 Hosted Zone in which kibana aliases will be created (without the trailing dot). Leave blank for no ALIAS.",
            "Type": "String",
            "AllowedPattern": "^(.*[^.]|)$"
        },
        "EBSVolumeSize": {
            "Description": "EBS storage to be attached to each instance (in GB). Set to zero for no attached EBS volume (the on-instance storage will be used instead).",
            "Type": "Number",
            "Default": 0,
            "MaxValue": 1000,
            "MinValue": 0
        },
        "SnapshotRepository": {
            "Description": "S3 bucket name for elasticsearch snapshots repository (will be created)",
            "Type": "String"
        },
        "SSLCertId": {
            "Description": "ARN for SSL Certificate - attached to Public and Private ELBs",
            "Type": "String"
        },
        "IndexKeepDays": {
            "Description": "Keep elasticsearch indices for x number of days",
            "Type": "Number",
            "Default": "8"
        }
    },

    "Conditions": {
        "HasDNS": { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "HostedZoneName" }, "" ] } ] },
        "UseEBS": { "Fn::Not": [ { "Fn::Equals" : [ { "Ref" : "EBSVolumeSize" }, "0" ] } ]},
        "HasS3": { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "SnapshotRepository" }, "" ] } ] }
    },

    "Mappings" : {
        "RegionMap" : {
            "us-east-1" :      { "ImageId": "ami-41986a2a" },
            "us-west-2" :      { "ImageId": "ami-35d4ee05" },
            "us-west-1" :      { "ImageId": "ami-5915e11d" },
            "eu-west-1" :      { "ImageId": "ami-b7443fc0" },
            "eu-central-1" :   { "ImageId": "ami-1afbc307" },
            "ap-southeast-1" : { "ImageId": "ami-205c5872" },
            "ap-southeast-2" : { "ImageId": "ami-990a70a3" },
            "ap-northeast-1" : { "ImageId": "ami-ee72a8ee" },
            "sa-east-1" :      { "ImageId": "ami-7727a46a" }
        },
        "InstanceMap": {
            "t2.small":   { "ESHeapSize": "1g" },
            "t2.medium":  { "ESHeapSize": "2g" },
            "m4.large":   { "ESHeapSize": "4g" },
            "m4.xlarge":  { "ESHeapSize": "8g" },
            "m4.2xlarge": { "ESHeapSize": "15g" }
        }
    },

    "Resources": {

        "ElkS3Bucket" : {
            "Type" : "AWS::S3::Bucket",
            "Condition": "HasS3",
            "Properties" : {
                "BucketName" : { "Ref": "SnapshotRepository" },
                "AccessControl" : "Private"
            }
        },

        "ElkS3Policy": {
            "Type": "AWS::IAM::Policy",
            "Condition": "HasS3",
            "Properties": {
                "PolicyName": "ElkS3Policy",
                "Groups": [],
                "Roles": [ { "Ref": "Role" } ],
                "Users": [],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "s3:ListBucket"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "ElkS3Bucket" } ] ] } ]
                        },
                        {
                            "Action": [
                                "s3:GetObject",
                                "s3:PutObject",
                                "s3:DeleteObject"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "ElkS3Bucket" } , "/*"] ] }
                            ]
                        }
                    ]
                }
            }
        },

        "Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [ "ec2.amazonaws.com" ]
                            }
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName":"ec2-describe-instances",
                        "PolicyDocument": {
                            "Version" : "2012-10-17",
                            "Statement": [
                                {
                                    "Action": "ec2:DescribeInstances",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ { "Ref": "Role" } ]
            }
        },

        "ElkPublicLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": true,
                "Listeners": [
                    {
                        "Protocol": "HTTP",
                        "LoadBalancerPort": "443",
                        "InstancePort": "8080",
                        "SSLCertificateId": { "Ref": "SSLCertId" }
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:8080/__es/",
                    "Timeout": "10",
                    "Interval": "20",
                    "UnhealthyThreshold": "10",
                    "HealthyThreshold": "2"
                },
                "Subnets": { "Ref": "PublicVpcSubnets" },
                "SecurityGroups": [
                    { "Ref": "ElkPublicLoadBalancerSecurityGroup" }
                ]
            }
        },

        "ElkInternalLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Scheme": "internal",
                "CrossZone": true,
                "Listeners": [
                    {
                        "Protocol": "HTTP",
                        "LoadBalancerPort": "9200",
                        "InstancePort": "9200",
                        "SSLCertificateId": { "Ref": "SSLCertId" }
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:8080/__es/",
                    "Timeout": "10",
                    "Interval": "20",
                    "UnhealthyThreshold": "10",
                    "HealthyThreshold": "2"
                },
                "Subnets": { "Ref": "PrivateVpcSubnets" },
                "SecurityGroups": [
                    { "Ref": "ElkInternalLoadBalancerSecurityGroup" }
                ]
            }
        },

        "ElkAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "VPCZoneIdentifier": { "Ref": "PrivateVpcSubnets" },
                "LaunchConfigurationName": { "Ref": "ElkLaunchConfig" },
                "MinSize": "1",
                "MaxSize": "4",
                "DesiredCapacity": { "Ref": "ElkCapacity" },
                "HealthCheckType": "EC2",
                "HealthCheckGracePeriod": 600,
                "LoadBalancerNames": [ { "Ref": "ElkPublicLoadBalancer" }, { "Ref": "ElkInternalLoadBalancer" } ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Stack",
                        "Value": { "Ref": "Stack" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "App",
                        "Value": "kibana",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Name",
                        "Value": "kibana",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },

        "ElkLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ImageId" ]},
                "SecurityGroups": [ { "Ref": "ElkSecurityGroup" }, { "Ref": "ElkPublicLoadBalancerSecurityGroup" }, { "Ref": "ElkInternalLoadBalancerSecurityGroup" } ],
                "InstanceType": { "Ref": "ElkInstanceType" },
                "BlockDeviceMappings": [ {
                    "Fn::If": [
                        "UseEBS",
                        {
                            "DeviceName" : "/dev/sdk",
                            "Ebs" : {
                                "VolumeSize" : { "Ref": "EBSVolumeSize"},
                                "VolumeType": "gp2"
                            }
                        },
                        { "Ref" : "AWS::NoValue" }
                    ]
                } ],
                "IamInstanceProfile": { "Ref": "InstanceProfile" },
                "KeyName": { "Ref": "KeyName" },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [ "\n", [
                            "#!/bin/bash -v",

                            "# Update repositories",

                            "wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -",
                            "echo \"deb http://packages.elastic.co/elasticsearch/1.7/debian stable main\" > /etc/apt/sources.list.d/elasticsearch-1.7.list",
                            "echo \"deb http://packages.elastic.co/logstash/1.5/debian stable main\" > /etc/apt/sources.list.d/logstash.list",
                            "add-apt-repository -y ppa:chris-lea/node.js",
                            "sleep 1",
                            "apt-get -y update",

                            "# Install Logstash & Elasticsearch",

                            "apt-get -y install ruby ruby-dev logstash openjdk-8-jre-headless openjdk-8-jdk elasticsearch nodejs ntp npm python-pip",

                            "/usr/share/elasticsearch/bin/plugin --install elasticsearch/elasticsearch-cloud-aws/2.6.0",
                            "/usr/share/elasticsearch/bin/plugin --install mobz/elasticsearch-head",
                            "/usr/share/elasticsearch/bin/plugin --install karmi/elasticsearch-paramedic",

                            "wget -O /etc/elasticsearch/elasticsearch.yml https://raw.githubusercontent.com/waysofeating/elk-stack/master/config/elasticsearch.yml",
                            { "Fn::Join": [ "", [ "sed -i",
                                " -e 's,@@REGION,", { "Ref": "AWS::Region" }, ",g'",
                                " -e 's,@@STACK,", { "Ref": "Stack" }, ",g'",
                                " -e 's,@@APP,kibana,g'",
                                " /etc/elasticsearch/elasticsearch.yml" ] ] },

                            { "Fn::Join": [ "", [
                                "echo ES_HEAP_SIZE=", { "Fn::FindInMap" : [ "InstanceMap", { "Ref" : "ElkInstanceType" }, "ESHeapSize" ]},
                                " >> /etc/default/elasticsearch"
                            ] ] },

                            "echo \"vm.overcommit_memory=1\" >> /usr/lib/sysctl.d/elasticsearch.conf",

                            { "Fn::If": [
                                "UseEBS",
                                { "Fn::Join": [ "\n", [
                                    "mkfs.ext4 /dev/xvdk",
                                    "mkdir /data",
                                    "mount /dev/xvdk /data",
                                    "echo '/dev/xvdk /data ext4 defaults 0 2' > /etc/fstab"
                                ]]},
                                { "Fn::Join": [ "\n", [
                                    "mkdir /data",
                                    "mount /dev/xvdb /data"
                                ]]}
                            ]},
                            "chown elasticsearch /data",

                            "wget -O /etc/logstash/conf.d/logstash-indexer.conf https://raw.githubusercontent.com/waysofeating/elk-stack/master/config/logstash-indexer.conf",
                            "sed -i -e 's,@@ELASTICSEARCH,localhost,g' /etc/logstash/conf.d/logstash-indexer.conf",

                            "# Install Kibana",

                            "wget -O /tmp/kibana-latest.tar.gz https://download.elastic.co/kibana/kibana/kibana-4.1.0-linux-x64.tar.gz",
                            "tar zxf /tmp/kibana-latest.tar.gz -C /opt",
                            "mv /opt/kibana-* /opt/kibana",

                            "# Install Logcabin",

                            "wget -O /tmp/elk-stack.tar.gz https://github.com/waysofeating/elk-stack/archive/master.tar.gz",
                            "tar zxf /tmp/elk-stack.tar.gz -C /tmp",
                            "mv /tmp/elk-stack-master/src /opt/logcabin",
                            "adduser --disabled-password --gecos \"\" logcabin",
                            "cd /opt/logcabin && npm install && cd ..",
                            "chown -R logcabin /opt/logcabin",

                            "wget -O /opt/logcabin/config.js https://raw.githubusercontent.com/waysofeating/elk-stack/master/config/config.js",
                            { "Fn::Join": [ "", [ "sed -i",
                                " -e s,@@LOGCABIN_HOST,",
                                    { "Fn::If" : [ "HasDNS",
                                        { "Fn::Join": [".", [ "kibana", {"Ref": "HostedZoneName"} ]] },
                                        { "Fn::GetAtt": [ "ElkPublicLoadBalancer", "DNSName" ] }
                                    ]}, ",g",
                                " -e s,@@COOKIE_SECRET,", { "Ref": "CookieSecret" }, ",g",
                                " -e s,@@CLIENT_ID,", { "Ref": "GoogleOAuthClientId" }, ",g",
                                " -e s,@@CLIENT_SECRET,", { "Ref": "GoogleOAuthClientSecret" }, ",g",
                                " -e s,@@ALLOWED_DOMAIN,", { "Ref": "AllowedDomain" }, ",g",
                                " /opt/logcabin/config.js" ] ] },

                            "# Start services",
                            "wget -O /etc/systemd/system/logcabin.service https://raw.githubusercontent.com/waysofeating/elk-stack/master/config/systemd-logcabin.service",
                            "wget -O /etc/systemd/system/kibana.service https://raw.githubusercontent.com/waysofeating/elk-stack/master/config/systemd-kibana.service",

                            "systemctl start logstash && systemctl enable logstash",
                            "systemctl start elasticsearch && systemctl enable elasticsearch",
                            "systemctl start kibana && systemctl enable kibana",
                            "systemctl start logcabin && systemctl enable logcabin",

                            "# Setup S3 snapshots",
                            { "Fn::If": [
                                "HasS3",
                                { "Fn::Join": [ "\n", [
                                    "while ! nc -z localhost 9200; do sleep 5; done; echo Elasticsearch is up!",
                                    { "Fn::Join": [ "", [
                                        "curl -XPUT 'http://localhost:9200/_snapshot/s3' -d '{",
                                            "\"type\": \"s3\",",
                                            "\"settings\": {",
                                                "\"bucket\": \"", { "Ref" : "ElkS3Bucket" }, "\",",
                                                "\"region\": \"", { "Ref" : "AWS::Region" }, "\"",
                                             "}",
                                        "}' && echo"
                                        ]
                                    ]},
                                    "curl 'http://localhost:9200/_snapshot/s3?pretty'",

                                    "wget -O /usr/local/bin/backup.sh https://raw.githubusercontent.com/waysofeating/elk-stack/master/scripts/backup.sh",
                                    "chmod +x /usr/local/bin/backup.sh",
                                    "echo '15 0 * * * root /usr/local/bin/backup.sh' >/etc/cron.d/backup"
                                ]]},
                                ""
                            ]},
                            "# Setup schedule to delete old indexes",

                            "pip install elasticsearch-curator",
                            { "Fn::Join": [ "", [
                                "echo '30 0 * * * root /usr/local/bin/curator --logfile /var/log/elasticsearch/curator.log delete indices --older-than ",
                                { "Ref" : "IndexKeepDays" },
                                " --time-unit days --timestring \"\\%Y.\\%m.\\%d\"' >/etc/cron.d/curator"
                                ]
                            ]}
                        ] ]
                    }
                }
            }
        },

        "ElkPublicLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": { "Ref": "VpcId" },
                "GroupDescription": "Allow access to kibana on public ELB from internet",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "ElkInternalLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": { "Ref": "VpcId" },
                "GroupDescription": "Allow logstash messages to internal ELB",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "6379",
                        "ToPort": "6379",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9200",
                        "ToPort": "9200",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "ElkSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow kibana from public and logstash from internal ELBs",
                "VpcId": { "Ref": "VpcId" },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "6379",
                        "ToPort": "6379",
                        "SourceSecurityGroupId": { "Ref": "ElkInternalLoadBalancerSecurityGroup" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9200",
                        "ToPort": "9200",
                        "SourceSecurityGroupId": { "Ref": "ElkInternalLoadBalancerSecurityGroup" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "SourceSecurityGroupId": { "Ref": "ElkPublicLoadBalancerSecurityGroup" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "ElkSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "ElkSecurityGroup", "GroupId" ] },
                "IpProtocol": "tcp",
                "FromPort": "9300",
                "ToPort": "9305",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "ElkSecurityGroup", "GroupId" ] }
            }
        },

        "KibanaAlias": {
            "Type" : "AWS::Route53::RecordSetGroup",
            "Condition": "HasDNS",
            "Properties" : {
                "HostedZoneName" : { "Fn::Join": ["", [{ "Ref" : "HostedZoneName" }, "."]] },
                "Comment" : "Alias to kibana elb",
                "RecordSets" : [
                    {
                        "Name" : { "Fn::Join": [".", [ "kibana", {"Ref": "HostedZoneName"} ]] },
                        "Type" : "A",
                        "AliasTarget" : {
                           "HostedZoneId" : { "Fn::GetAtt" : ["ElkPublicLoadBalancer", "CanonicalHostedZoneNameID"] },
                            "DNSName" : { "Fn::GetAtt" : ["ElkPublicLoadBalancer","DNSName"] }
                        }
                    },
                    {
                        "Name" : { "Fn::Join": [".", [ "logstash", {"Ref": "HostedZoneName"} ]] },
                        "Type" : "A",
                        "AliasTarget" : {
                           "HostedZoneId" : { "Fn::GetAtt" : ["ElkInternalLoadBalancer", "CanonicalHostedZoneNameID"] },
                            "DNSName" : { "Fn::GetAtt" : ["ElkInternalLoadBalancer","DNSName"] }
                        }
                    }
                ]
            }
        }
    },

    "Outputs": {
        "LogstashEndpoint": {
            "Value": { "Fn::Join": ["", [ { "Fn::GetAtt": [ "ElkInternalLoadBalancer", "DNSName" ]}, ":9200"]] },
            "Description": "Logging endpoint for Logstash TCP input"
        },
        "KibanaURL": {
            "Value": { "Fn::Join": ["", ["https://",
                { "Fn::If" : [ "HasDNS",
                    { "Fn::Join": [".", [ "kibana", {"Ref": "HostedZoneName"} ]] },
                    { "Fn::GetAtt": [ "ElkPublicLoadBalancer", "DNSName" ]}
                ]}, "/"]] },
            "Description": "URL for the Kibana 4 Dashboard"
        },
        "GoogleOAuthRedirectUrl": {
            "Value": { "Fn::Join": ["", ["https://",
                { "Fn::If" : [ "HasDNS",
                    { "Fn::Join": [".", [ "kibana", {"Ref": "HostedZoneName"} ]] },
                    { "Fn::GetAtt": [ "ElkPublicLoadBalancer", "DNSName" ]}
                ]}, "/auth/google/callback"]] },
            "Description": "Redirect URL for the Google Developers Console"
        }
    }
}
